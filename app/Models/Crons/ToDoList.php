<?php

namespace App\Models\Crons;

use App\Models\Auth\User;
use App\Traits\ToDoListProps;
use App\Traits\ToDoListScopes;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;

/**
 * Class ToDoList
 *
 * @property-read ToDoList toTest
 * @property-read ToDoList toReadFollowers
 * @property-read ToDoList toCheckFollow
 * @property-read ToDoList toFollow
 * @property-read ToDoList toCheckUnfollow
 * @property-read ToDoList toUnfollow
 *
 * @package App\Models\Crons
 */
class ToDoList extends Model
{
	use
		ToDoListScopes,
		ToDoListProps;
	
	protected
		$fillable = [
			'entity_type',
			'entity_id',
			'action',
			'note',
			'user_id',
			'run_time',
			'finish_time',
			'status',
		],
		
		$dates = [
			'created_at',
			'updated_at',
			'run_time',
			'finish_time',
		],
			
			$casts = [
			'run_time'    => 'datetime:d-m-Y h:i a',
			'finish_time' => 'datetime:d-m-Y h:i a',
		];
	
	/**
	 * Status enum
	 */
const
	STATUS = [
		'ACTIVE'   => 'active',
		'INACTIVE' => 'inactive',
		'PENDING' => 'pending',
		'COMPLETED' => 'completed',
	],
	PENDING 	= self::STATUS['PENDING'],
	COMPLETED 	= self::STATUS['COMPLETED'],
	
	ACTIONS = [
		'TEST' 				=> 'testing',
	
		'READ_FOLLOWERS' 	=> 'readFollowers',
	
		'FOLLOW' 			=> 'follow',
		'CHECK_FOLLOW' 		=> 'checkFollow',
	
		'UNFOLLOW' 			=> 'unfollow',
		'CHECK_UNFOLLOW' 	=> 'checkUnfollow',
	],
	DEFAULT_ACTION = self::ACTIONS['TEST'];
	
	/**
	 * The "booting" method of the model.
	 *
	 * @return void
	 */
	protected static function boot() {
		parent::boot();
		
		static::addGlobalScope('waiting', function (Builder $builder) {
			$builder->notCompleted();
		});
		
		/**
		 * before save() method call this
		 */
		static::saving(function (ToDoList $todo) {
			$todo->user_id = $todo->user_id ?: User()->id;
			$todo->action = $todo->action ?: self::DEFAULT_ACTION;
			$todo->status = $todo->status ?: self::PENDING;
		});
	}

// region relations
	public function entity() {
		return $this->morphTo();
	}
	
	public function user() {
		return $this->belongsTo(User::class);
	}
// endregion relations
	
// region attributes
	public function __get($key) {
		$_key = lcfirst(studly_case(strtolower($key)));
		if(str_start(strtolower($_key), "to")) {
			$act = str_after($key, "to");
			$actName = strtoupper(snake_case(ucfirst($act)));
			if(isset(self::ACTIONS[$actName])) {
				$actValue = self::ACTIONS[$actName];
				return $this->action($actValue);
			}
		}
		
		return parent::__get($key); // TODO: Change the autogenerated stub
	}
// endregion attributes


}
