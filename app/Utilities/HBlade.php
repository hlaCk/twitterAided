<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 3/8/2019
 * Time: 03:11 ุต
 */

namespace App\Utilities;


use Illuminate\Support\Facades\Blade;

/**
 * Class HBlade
 *
 * Example:
 * 		HBlade::define()->admin("(\$___user = User({arg})) && \$___user->isAdmin() === true");
 *
 * 		HBlade::new_admin("(\$___user = User({arg})) && \$___user->isAdmin() === true", function (HBladeArg $code = null) {
 * 				return $code->toIfCode();
 * 		});
 *
 * 		HBlade::def('admin', "(\$___user = User({arg})) && \$___user->isAdmin() === true");
 *
 * 		HBlade::def('admin')
 * 		   ->code("(\$___user = User({arg})) && \$___user->isAdmin() === true")
 * 		   ->register();
 * 		// ->callback(function (HBladeArg $codeee = null) { return $codeee->toIfCode(); })
 *
 * 		(new HBlade('admin'))
 * 		   ->code("(\$___user = User({arg})) && \$___user->isAdmin() === true")
 * 		   ->register();
 * 		// ->callback(function (HBladeArg $code = null) { return $code->toIfCode(); })
 *
 * Alias: HBlade()
 *
 * @package App\Utilities
 */
class HBlade extends Blade
{
	private $data = [
		'name'=>null,
		'code'=>null,
		'callback'=>null,
	];
	
	public function __construct($name = null, $code = null, callable $callback = null) {
		if(!is_null($name))
			$this->data['name'] = $name;
		
		if(!is_null($code))
			$this->data['code'] = $code;
		
		$this->data['callback'] = !is_null($callback) ? $callback : HBlade::defaultIfCodeCallback();
	}
	
	public function code($code = "") {
		$this->data['code'] = $code;
		return $this;
	}
	
	public function callback(callable $callback = null) {
		$this->data['callback'] = $callback;
		return $this;
	}
	
	public function register() {
		Blade::directive(
			$this->data['name'],
			self::makeCmd($this->data['callback'] ?: HBlade::defaultIfCodeCallback(), $this->data['name'], $this->data['code'])
		);

		// $this->data = [
		// 	'name'     => null,
		// 	'code'     => null,
		// 	'callback' => null,
		// ];
		
		return $this;
	}

    public function directRegister(callable $handler) {
        Blade::directive($this->data['name'], $handler ?: $this->data['callback'] ?: HBlade::defaultIfCodeCallback());

        return $this;
    }

    public static function defaultIfCodeCallback() {
		return function (HBladeArg $code = null) { return $code->toIfCode(); };
	}
	
	public static function execCond($cond = null) {
		$cond = !is_null($cond) ? $cond : [];
		if ($cond && ($cond = collect(eval("return [{$cond}];"))) && $cond->count()) {
			$_cond = collect(['data'=>collect([]), e=>false]);
			$cond->map(function ($c) use (&$_cond) {
				if (defined('e') && $c === e) {
					$_cond->put(e, 'true');
					return e;
				} else {
					$_cond->get('data')->push($c);
					
					return $c;//User($c);
				}
			});
			
			return $_cond->count() ? $_cond->toArray() : null;
		}
		
		return $cond ? collect($cond)->toArray() : null;
		// $cond = $cond->count() ? $cond->map('User')->first()->id : '') ?: '';
	}
	
	public static function makeCmd(callable $func, $name = null, $code = null) {
		return function (...$arg) use (&$func, $name, $code){
			$conds = new HBladeArg(HBlade::execCond(...$arg), $name);
			!is_null($code) && $conds->code($code);

			return $func($conds);
		};
	}
	
	public static function define($name = null, $code = null, callable $callback = null) {
		if(func_num_args() === 0) {
			return new class {
				public function __call($name, $arguments) {
					return HBlade::define($name, ...$arguments);
				}
			};
		}
		
		$blade = new HBlade($name);
		if (!is_null($callback))
			$blade->callback($callback);
		
		if (!is_null($code))
			$blade->code($code);
		
		return !is_null($code) ? $blade->register() : $blade;
	}
	
	public static function __callStatic($method, $args) {
		$name = null;
		
		if(starts_with($method, 'DEFINE')) {
			$name = trim(str_after($method, 'DEFINE'));
		} else if(starts_with($method, 'DEF')) {
			$name = trim(str_after($method, 'DEF'));
		} else if(starts_with($method, 'AS')) {
			$name = trim(str_after($method, 'AS'));
		} else if(starts_with($method, 'new_')) {
			$name = trim(str_after($method, 'new_'));
		}
		
		if(!is_null($name)) {
			return HBlade::define($name, ...$args);
		} else {
			return parent::__callStatic($method, $args); // TODO: Change the autogenerated stub
		}
	}
	
	/**
	 * Register blade commands
	 *
	 *
	 * **Commands**: (ID == user id, null == current user)
	 * * admin(ID)
	 * * notAdmin(ID)
	 * * elseAdmin(ID)
	 * * e
	 * * eif
	 * * endadmin
	 *
	 * @static
	 */
	public static function registerCommands() {
		HBlade('admin')->code("(\$___user = User({arg})) && \$___user->isAdmin() === true")->register();
		
		(new HBlade('notAdmin'))
			->code("(\$___user = User({arg})) && \$___user->isAdmin() !== true")
			->callback(function (HBladeArg $code = null) {
				return $code->toIfCode();
			})
			->register();
		
		(new HBlade('elseAdmin'))
			->code("(\$___user = User({arg})) && \$___user->isAdmin() === true")
			->callback(function (HBladeArg $code = null) {
				$code->else = true;
				
				return $code->toIfCode();
			})
			->register();
		
		(new HBlade('e'))
			->code(" else: ")
			->callback(function (HBladeArg $code = null) {
				return $code->toPHPCode();
			})
			->register();
		
		(new HBlade('eif'))
			->code(" endif ")
			->callback(function (HBladeArg $code = null) {
				return $code->toPHPCode();
			})
			->register();
		
		HBlade('endadmin')
			->code(" endif ")
			->callback(function (HBladeArg $c = null) { return $c->toPHPCode(); })
			->register();
	}
}